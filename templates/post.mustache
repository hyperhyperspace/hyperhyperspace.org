<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">

  <title>rexriepe.com</title>
  <meta name="description" content="Personal site of Rex Riepe">
  <meta name="author" content="Rex Riepe">
  <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>{{> css/index}}</style>
</head>

<body>

  {{> templates/nav}}
    <main role="main">

    <article id="{{title}}">
        <h1 class="headline"><a href="/posts/{{title}}/">{{display_title}}</a></h1>
        <p class="date">by Rex Riepe | <time datetime="{{datetime}}">12-02-2020</time></p>
        <p>Here are my three golden rules/principles/guidelines to building good software as a team:</p>
        <aside class="info">
            <h4>TL;DR:</h4>
            <ul>
                <li>Good enough</li>
                <li>Document everything</li>
                <li>Power sucks</li>
            </ul>
        </aside>
        <h4>Good enough</h4>
        <p>Write code that's good enough. It doesn't have to be blazingly fast or have theoretically perfect optimizations. It just has to work. There's never any other requirement.</p>
        <p>Really.</p>
        <p>It doesn't even really need to be fast except on the frontend. If you can do something in 16 milliseconds then you can maintain 60 frames per second. Computers can do a lot of things in 16 milliseconds these days.</p>
        <p>The ideal case for your code is for you to never look at it again as soon as possible.</p>
        <p>Finally, <em>be good enough.</em> Chasing ever-higher standards can lead tech teams to make really silly decisions.</p>
        <h4>Document everything</h4>
        <p>Write everything down. Somewhere. In whatever form works for you and your team.</p>
        <p>The best documentation is right there with the thing you're working on. Comments in code are just great. Type systems and tests too are documentation&mdash; one of expected inputs and one of expected outputs.</p>
        <p>Using something, anything, to help make your code make more sense in some way benefits the next person who reads the code. Much of the time, that person will be you.</p>
        <h4>Power sucks</h4>
        <p>Power games and office politics shouldn't be driving your tech stack.</p>
        <p>Everybody loves a good tech rivalry (except Rails guys, the snobs!) but nobody has a good time when tech decisions tear a team apart.</p>
        <p>Perhaps even worse than the turf-war style office politics are when one person unilaterally makes technology decisions for the team, with no (or ignored) input.</p>
        <p>In short: Power sucks. At least when it starts poisoning a team's choices. We're a profession that, for better or worse, cares deeply about the tools we use.</p>
        <p>We also care about the stuff we work on, so this rule ends up applying to product roadmap and even UX decisions.</p>
    </article>
    </main>
    {{> templates/footer}}
</body>
</html>